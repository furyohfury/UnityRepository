//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Units/Players/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace RPG.Units.Player
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Unit"",
            ""id"": ""bd28d3e5-2d41-479f-9810-5acb684b4c25"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1ca1e21e-89c6-4ec6-8c40-ecdef2aaa63d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwordAttack"",
                    ""type"": ""Button"",
                    ""id"": ""3d9fcea8-58ca-4ac4-bd77-73f9cbe41b28"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShieldAtatck"",
                    ""type"": ""Button"",
                    ""id"": ""db6fd9f3-cbbe-4fd6-82ce-89a6c4cbf96f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockTarget"",
                    ""type"": ""Button"",
                    ""id"": ""af3af804-2915-4e98-9d24-48d1c1d689a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c7d4f8a0-a706-4d9c-9538-8c2df8bb71e5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fc6cb8fe-c81f-46ec-b8d0-0d3b270c3126"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fb4e0d4b-1eba-49f0-88b0-34b6933bf547"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3edef056-423b-40d6-8da7-a6ecb6b11f10"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3cd2f480-135a-4ffb-a1ee-572cba7a089a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4d4262a7-8242-448c-a457-a847e8cbc5ec"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3500e98-97d2-4f47-aa09-ecb74f5f2cbc"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwordAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""463760c3-eb70-4f52-be7d-ff3139892951"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShieldAtatck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""947db27a-9181-431a-8b5f-204cd4cbade1"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""0834369c-e266-48c8-9645-449163436cad"",
            ""actions"": [
                {
                    ""name"": ""Delta"",
                    ""type"": ""Value"",
                    ""id"": ""1d69cfc9-1aa2-4aaf-9d56-907be4fad338"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""92195f7d-bb1b-4d32-adec-b18715826dc0"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Unit
            m_Unit = asset.FindActionMap("Unit", throwIfNotFound: true);
            m_Unit_Move = m_Unit.FindAction("Move", throwIfNotFound: true);
            m_Unit_SwordAttack = m_Unit.FindAction("SwordAttack", throwIfNotFound: true);
            m_Unit_ShieldAtatck = m_Unit.FindAction("ShieldAtatck", throwIfNotFound: true);
            m_Unit_LockTarget = m_Unit.FindAction("LockTarget", throwIfNotFound: true);
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_Delta = m_Camera.FindAction("Delta", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Unit
        private readonly InputActionMap m_Unit;
        private List<IUnitActions> m_UnitActionsCallbackInterfaces = new List<IUnitActions>();
        private readonly InputAction m_Unit_Move;
        private readonly InputAction m_Unit_SwordAttack;
        private readonly InputAction m_Unit_ShieldAtatck;
        private readonly InputAction m_Unit_LockTarget;
        public struct UnitActions
        {
            private @PlayerControls m_Wrapper;
            public UnitActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Unit_Move;
            public InputAction @SwordAttack => m_Wrapper.m_Unit_SwordAttack;
            public InputAction @ShieldAtatck => m_Wrapper.m_Unit_ShieldAtatck;
            public InputAction @LockTarget => m_Wrapper.m_Unit_LockTarget;
            public InputActionMap Get() { return m_Wrapper.m_Unit; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UnitActions set) { return set.Get(); }
            public void AddCallbacks(IUnitActions instance)
            {
                if (instance == null || m_Wrapper.m_UnitActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UnitActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @SwordAttack.started += instance.OnSwordAttack;
                @SwordAttack.performed += instance.OnSwordAttack;
                @SwordAttack.canceled += instance.OnSwordAttack;
                @ShieldAtatck.started += instance.OnShieldAtatck;
                @ShieldAtatck.performed += instance.OnShieldAtatck;
                @ShieldAtatck.canceled += instance.OnShieldAtatck;
                @LockTarget.started += instance.OnLockTarget;
                @LockTarget.performed += instance.OnLockTarget;
                @LockTarget.canceled += instance.OnLockTarget;
            }

            private void UnregisterCallbacks(IUnitActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @SwordAttack.started -= instance.OnSwordAttack;
                @SwordAttack.performed -= instance.OnSwordAttack;
                @SwordAttack.canceled -= instance.OnSwordAttack;
                @ShieldAtatck.started -= instance.OnShieldAtatck;
                @ShieldAtatck.performed -= instance.OnShieldAtatck;
                @ShieldAtatck.canceled -= instance.OnShieldAtatck;
                @LockTarget.started -= instance.OnLockTarget;
                @LockTarget.performed -= instance.OnLockTarget;
                @LockTarget.canceled -= instance.OnLockTarget;
            }

            public void RemoveCallbacks(IUnitActions instance)
            {
                if (m_Wrapper.m_UnitActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUnitActions instance)
            {
                foreach (var item in m_Wrapper.m_UnitActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UnitActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UnitActions @Unit => new UnitActions(this);

        // Camera
        private readonly InputActionMap m_Camera;
        private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
        private readonly InputAction m_Camera_Delta;
        public struct CameraActions
        {
            private @PlayerControls m_Wrapper;
            public CameraActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Delta => m_Wrapper.m_Camera_Delta;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void AddCallbacks(ICameraActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
                @Delta.started += instance.OnDelta;
                @Delta.performed += instance.OnDelta;
                @Delta.canceled += instance.OnDelta;
            }

            private void UnregisterCallbacks(ICameraActions instance)
            {
                @Delta.started -= instance.OnDelta;
                @Delta.performed -= instance.OnDelta;
                @Delta.canceled -= instance.OnDelta;
            }

            public void RemoveCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraActions @Camera => new CameraActions(this);
        public interface IUnitActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnSwordAttack(InputAction.CallbackContext context);
            void OnShieldAtatck(InputAction.CallbackContext context);
            void OnLockTarget(InputAction.CallbackContext context);
        }
        public interface ICameraActions
        {
            void OnDelta(InputAction.CallbackContext context);
        }
    }
}
