//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/CameraInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Zikkurat.CameraControl
{
    public partial class @CameraInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CameraInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraInput"",
    ""maps"": [
        {
            ""name"": ""CameraMap"",
            ""id"": ""5e711f33-82f5-4ef3-a014-004edde41e81"",
            ""actions"": [
                {
                    ""name"": ""CameraActions"",
                    ""type"": ""Value"",
                    ""id"": ""50e8a35a-63e9-44c5-a6de-60828480d438"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraMouse"",
                    ""type"": ""Value"",
                    ""id"": ""c7282563-e446-4ab9-80c5-163ed032fc24"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""d65d5f61-d8dc-4414-a95b-999d4951def8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraActions"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""813aad4c-f0e8-4197-9c04-a3bc1d4d5a9c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f6356e78-c5d8-446c-83db-4b6268c05b17"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""49f74320-556d-4fbe-972e-f9df6ae0c924"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f43c7df2-4bb4-4204-8337-b7f5b81c85fd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""1c2398a0-951b-41e1-81c4-42f48ff91e9a"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMouse"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""2ce079f0-138a-4f3d-8599-3b18e2e968b5"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""f37f4493-76e0-450e-99cb-5f3b84c5a30c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CameraMap
            m_CameraMap = asset.FindActionMap("CameraMap", throwIfNotFound: true);
            m_CameraMap_CameraActions = m_CameraMap.FindAction("CameraActions", throwIfNotFound: true);
            m_CameraMap_CameraMouse = m_CameraMap.FindAction("CameraMouse", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CameraMap
        private readonly InputActionMap m_CameraMap;
        private List<ICameraMapActions> m_CameraMapActionsCallbackInterfaces = new List<ICameraMapActions>();
        private readonly InputAction m_CameraMap_CameraActions;
        private readonly InputAction m_CameraMap_CameraMouse;
        public struct CameraMapActions
        {
            private @CameraInput m_Wrapper;
            public CameraMapActions(@CameraInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @CameraActions => m_Wrapper.m_CameraMap_CameraActions;
            public InputAction @CameraMouse => m_Wrapper.m_CameraMap_CameraMouse;
            public InputActionMap Get() { return m_Wrapper.m_CameraMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraMapActions set) { return set.Get(); }
            public void AddCallbacks(ICameraMapActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraMapActionsCallbackInterfaces.Add(instance);
                @CameraActions.started += instance.OnCameraActions;
                @CameraActions.performed += instance.OnCameraActions;
                @CameraActions.canceled += instance.OnCameraActions;
                @CameraMouse.started += instance.OnCameraMouse;
                @CameraMouse.performed += instance.OnCameraMouse;
                @CameraMouse.canceled += instance.OnCameraMouse;
            }

            private void UnregisterCallbacks(ICameraMapActions instance)
            {
                @CameraActions.started -= instance.OnCameraActions;
                @CameraActions.performed -= instance.OnCameraActions;
                @CameraActions.canceled -= instance.OnCameraActions;
                @CameraMouse.started -= instance.OnCameraMouse;
                @CameraMouse.performed -= instance.OnCameraMouse;
                @CameraMouse.canceled -= instance.OnCameraMouse;
            }

            public void RemoveCallbacks(ICameraMapActions instance)
            {
                if (m_Wrapper.m_CameraMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraMapActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraMapActions @CameraMap => new CameraMapActions(this);
        public interface ICameraMapActions
        {
            void OnCameraActions(InputAction.CallbackContext context);
            void OnCameraMouse(InputAction.CallbackContext context);
        }
    }
}
